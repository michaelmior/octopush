#!/usr/bin/env node
//-*- mode: javascript -*-
/*
  Octopush - A scale out realtime websocket-push server
  Copyright (C) 2013 Adam HÃ¶se

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  
*/

PROTO_VER = "0";

var argv = require('optimist')
    .usage('Usage: $0 --host "tcp://*:3000" --port 3001 --authurl "http://127.0.0.1:8080/ws-auth"')
    .default("host", "tcp://*:3000") //Backen listen host
    .default("port", 3001) //Web listen port
    .default("authurl", undefined) //HTTP-auth url
    .default("sdebug", 1) //Socket.io debug
    .default("user", false) //Setuid to this user
    .default("group", false) //Setgid to this group
    .default("ssl", false) //Use ssl
    .default("key", undefined) //ssl keyfile
    .default("cert", undefined) //ssl certfile
    .argv;
if(typeof(argv.authurl) !== "undefined")
    argv.authurl = url.parse(argv.authurl);

var api = {
    /*
      ZMQ API
    */

    init: function(host) {

	//Set up socket
	this.socket = require('zmq').socket('sub');
	this.socket.bindSync(host);
	this.socket.subscribe(PROTO_VER + message.types.bcast); //Broadcast subscription
	
	//Message relay
	this.socket.on('message', function(envelope, msg) {
	    try {
		msg = JSON.parse(msg.toString());
	    } catch(err) {
		if(msg && envelope) {
		    console.error("Got non-json data '" + msg.toString() + "' for envelope '" + envelope.toString() + "'");
		} else {
		    console.log("Got malformed data '" + envelope.toString() + "', are you sending a non-multipart message?");
		}
		return;
	    }
	    envelope = envelope.toString();

	    switch(envelope[1]) {
	    case message.types.bcast:
		io.sockets.emit("message", msg);
		break;
	    case message.types.chan:
		io.sockets.in(message.types.chan + envelope.slice(2, envelope.length)).emit("message", msg)
		break;
	    case message.types.user:
		io.sockets.in(message.types.user + envelope.slice(2, envelope.length)).emit("message", msg)
		break;
	    }
	});
    }
}

var message = {
    /*
      Message parsing and statics
    */

    parse: function(msg) {
	msg = msg.toString();
	var i = msg.indexOf(" ");
	msg = [msg.slice(0,i), JSON.parse(msg.slice(i+1))]
	return msg;
    },

    types: {
	bcast: "0",
	chan: "1",
	user: "2"
    }

}

/*
  Websocket listen & socket.io provider
*/
var express = require("express"),
app = express();
if(argv.ssl) {

    if(typeof(argv.key) === "undefined" || typeof(argv.cert) === "undefined")
	throw Error("Cert or keyfile undefined")

    var http = require('https');
    var fs = require("fs");
    server = http.createServer({
	key: fs.readFileSync(argv.key),
	cert: fs.readFileSync(argv.cert)
    },app);

} else {

    var http = require('http'),
    server = http.createServer(app);

}
var io = require('socket.io').listen(server);

//Static resources
app.get('/', function (req, res) {
    res.sendfile(__dirname.replace(/bin$/, "") + 'usr/share/octopush/index.html');
});
app.get('/client.js', function (req, res) {
    res.sendfile(__dirname.replace(/bin$/, "") + 'usr/share/octopush/client.js');
});
app.get('/robots.txt', function (req, res) {
    res.sendfile(__dirname.replace(/bin$/, "") + 'usr/share/octopush/robots.txt');
});
app.use("/static", express.static(__dirname.replace(/bin$/, "") + 'usr/share/octopush/'))

io.sockets.on("connection", function(socket) {
    /*
      Websocket handling
     */

    socket.user = false,

    socket.on("auth", function(data) {

	if(typeof(argv.authurl) === "undefined") {
	    socket.emit("auth", 2);
	    return;
	}

	//User auth request
	var req = http.request({
	    hostname: argv.authurl.hostname,
	    port: argv.authurl.port,
	    path: argv.authurl.path,
	    method: 'GET',
	    headers: {
		Cookie: data
	    }
	}, function(resp) {
	    var user = "";
	    resp.on("data", function(chunk) {
		user+=chunk;
	    });
	    resp.on("end", function() {
		if(resp.statusCode === 200) {
		    socket.user = user;
		    socket.emit("auth", 0);
		    api.socket.subscribe(PROTO_VER + message.types.user + socket.user);
		} else {
		    socket.emit("auth", 1);
		}
	    });
	}).end();
	
    });

    socket.on("join", function(data) {

	var callback = function() {
	    socket.join(message.types.chan + data.chan);
	    api.socket.subscribe(PROTO_VER + message.types.chan + data.chan);
	}

	if(!("/" + message.types.chan + data in io.sockets.manager.roomClients[socket.id])) {
	    switch(data.chan[0]) {

	    case "!": //Private channel

		if(typeof(argv.authurl) === "undefined")
		    return;

		//Channel auth request
		var req = http.request({
		    hostname: argv.authurl.hostname,
		    port: argv.authurl.port,
		    path: argv.authurl.path + "?chan=" + data.chan,
		    method: 'GET',
		    headers: {
			Cookie: data.cookie
		    }
		}, function(resp) {
		    resp.on("end", function() {
			if(resp.statusCode === 200)
			    callback();
		    });
		}).end();
		break;

	    case "#": //Authed channel
		if(socket.user != false)
		    callback();
		break;

	    default: //Public channel
		callback();
		break;

	    }
	}
    });

    socket.on("part", function(data) {
	if("/" + message.types.chan + data in io.sockets.manager.roomClients[socket.id]) {
	    socket.leave(message.types.chan + data);
	    api.socket.unsubscribe(PROTO_VER + message.types.chan + data);
	}
    });

    socket.on("disconnect", function() {

	//ZMQ channel subscription cleanup
	for(var i in io.sockets.manager.roomClients[socket.id]) {
	    if(i !== "") {
		i=i.slice(1, i.length);
		if("/" + i in io.sockets.manager.roomClients[socket.id])
		    api.socket.unsubscribe(PROTO_VER + message.types.chan + i);
	    }
	}

	//ZMQ user subscription cleanup
	if(socket.authed != false)
	    api.socket.subscribe(PROTO_VER + message.types.user + socket.user);
    });
});

/*
  Init
*/
io.set('log level', argv.sdebug)
api.init(argv.host);
server.listen(argv.port, function() {

    if(argv.user !== false)
	process.setuid(argv.user);
    if(argv.group !== false)
	process.setgid(argv.group);

});
